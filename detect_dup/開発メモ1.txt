# 実装しやすい改善項目の優先順位

## 🟢 すぐに実装可能（1-2日）

### 1. **三項演算子 ↔ if-else 正規化** ⭐⭐⭐⭐⭐
**実装難易度**: 極めて簡単  
**効果**: 高い  
**必要技術**: sed/awk の正規表現のみ

```bash
# 実装例（正規化処理に追加）
normalize_conditionals() {
  sed -E '
    # 三項演算子を if-else に変換
    s/([^?]+)\?([^:]+):([^;]+)/if(\1){\2}else{\3}/g
    # return文の三項演算子
    s/return ([^?]+)\?([^:]+):([^;]+)/if(\1){return \2}else{return \3}/g
  ' "$1"
}
```

### 2. **ES6+ 構文の基本正規化** ⭐⭐⭐⭐☆
**実装難易度**: 簡単  
**効果**: 中程度  
**必要技術**: sed/awk の拡張正規表現

```bash
# テンプレートリテラル → 文字列連結
normalize_template_literals() {
  sed -E '
    # `Hello ${name}` → "Hello " + name
    s/`([^`]*)\$\{([^}]+)\}([^`]*)`/"VAR" + VAR + "VAR"/g
    # アロー関数 → function
    s/([A-Za-z_$][A-Za-z0-9_$]*)\s*=>\s*/function VAR()/g
  ' "$1"
}
```

### 3. **分割代入の正規化** ⭐⭐⭐⭐☆
```bash
# {name, email} → VAR.name, VAR.email
normalize_destructuring() {
  sed -E '
    # オブジェクト分割代入
    s/\{([^}]+)\}/VAR/g
    # 配列分割代入
    s/\[([^\]]+)\]/VAR/g
  ' "$1"
}
```

## 🟡 比較的簡単（3-5日）

### 4. **配列メソッドチェーンの正規化** ⭐⭐⭐☆☆
**実装難易度**: 中程度  
**効果**: 高い  
**必要技術**: より複雑な正規表現 + awk

```bash
# forEach+push → filter の検出
detect_array_patterns() {
  awk '
    /forEach.*push/ { 
      # forEach + push パターンを filter パターンに正規化
      gsub(/forEach.*push/, "ARRAY_FILTER_PATTERN")
      print "ARRAY_FILTER_PATTERN\t" FILENAME ":" NR
    }
    /\.filter\(/ {
      print "ARRAY_FILTER_PATTERN\t" FILENAME ":" NR  
    }
  ' "$1"
}
```

### 5. **コメント・空白の改善された除去** ⭐⭐⭐☆☆
```bash
# より正確なコメント除去
improve_comment_removal() {
  awk '
    BEGIN { in_string = 0; in_comment = 0 }
    {
      result = ""
      for (i = 1; i <= length($0); i++) {
        char = substr($0, i, 1)
        next_char = substr($0, i+1, 1)
        
        if (!in_string && !in_comment) {
          if (char == "/" && next_char == "/") {
            break  # 行コメント開始
          }
          if (char == "/" && next_char == "*") {
            in_comment = 1; i++; continue
          }
          if (char == "\"" || char == "\'") {
            in_string = char
          }
        }
        # ... 続く
        result = result char
      }
      print result
    }
  ' "$1"
}
```

### 6. **Node.js 基本AST解析の導入** ⭐⭐⭐☆☆
**実装難易度**: 中程度  
**効果**: 非常に高い  
**必要技術**: Node.js + 基本的なJavaScript

```javascript
// ast_analyzer.js
const parser = require('@babel/parser');
const fs = require('fs');

function analyzeFile(filename) {
  const code = fs.readFileSync(filename, 'utf8');
  
  try {
    const ast = parser.parse(code, {
      sourceType: 'module',
      plugins: ['jsx', 'typescript']
    });
    
    // 基本的なAST正規化
    const functions = [];
    
    function traverse(node) {
      if (node.type === 'FunctionDeclaration') {
        const normalized = normalizeFunctionAST(node);
        functions.push({
          hash: hashAST(normalized),
          location: `${filename}:${node.loc.start.line}`
        });
      }
      
      for (const key in node) {
        if (node[key] && typeof node[key] === 'object') {
          if (Array.isArray(node[key])) {
            node[key].forEach(traverse);
          } else {
            traverse(node[key]);
          }
        }
      }
    }
    
    traverse(ast);
    return functions;
  } catch (error) {
    return [];
  }
}
```

## 🟠 中程度の実装（1-2週間）

### 7. **変数名の意味的グループ化** ⭐⭐☆☆☆
**実装難易度**: やや困難  
**効果**: 高い  
**必要技術**: 辞書ベース + ルールエンジン

```bash
# 意味的に同じ変数名のマッピング
create_semantic_mapping() {
  cat > "$TMP/semantic_vars.map" << 'EOF'
total:sum:amount:count
items:products:elements:data
user:customer:person:account
price:cost:fee:charge
name:title:label:identifier
EOF

  # 正規化時に適用
  while IFS=: read -r synonyms; do
    first_word=$(echo "$synonyms" | cut -d: -f1)
    echo "$synonyms" | tr ':' '\n' | while read word; do
      sed -i "s/\b$word\b/$first_word/g" "$1"
    done
  done < "$TMP/semantic_vars.map"
}
```

### 8. **制御フロー構造の正規化** ⭐⭐☆☆☆
```bash
# 早期リターン → ネスト構造への変換
normalize_control_flow() {
  awk '
    /if.*return/ {
      # 早期リターンパターンを通常のif-else構造に変換
      gsub(/if\s*\([^)]+\)\s*return[^;]*;/, "EARLY_RETURN_PATTERN")
    }
    { print }
  ' "$1"
}
```

## 🔴 実装困難だが効果大（数週間〜数ヶ月）

### 9. **完全なAST based セマンティック解析** ⭐☆☆☆☆
**実装難易度**: 困難  
**効果**: 非常に高い  
**必要技術**: 高度なJavaScript、AST解析、アルゴリズム

### 10. **機械学習ベースの類似性検出** ⭐☆☆☆☆
**実装難易度**: 非常に困難  
**効果**: 最高  
**必要技術**: Python、機械学習、コード埋め込み

## 📋 実装推奨順序

### **Week 1: 即効性のある改善**
```bash
# 1. 三項演算子正規化を追加
add_conditional_normalization() {
  # normalize_js関数に追加
}

# 2. テンプレートリテラル正規化
add_template_literal_normalization() {
  # normalize_js関数に追加  
}

# 3. 分割代入正規化
add_destructuring_normalization() {
  # normalize_js関数に追加
}
```

### **Week 2: 配列操作パターン強化**
```bash
# 4. 配列メソッドの詳細検出
enhance_array_pattern_detection() {
  # detect_pattern_duplicates関数を拡張
}

# 5. コメント除去の改善
improve_comment_processing() {
  # normalize_js関数を置き換え
}
```

### **Week 3-4: AST解析の基礎導入**
```bash
# 6. Node.js AST解析モジュール
implement_basic_ast_analysis() {
  # ast_analyzer.js を作成
  # detect_dup_modular.sh に統合
}
```

## 🛠️ 具体的な実装例（三項演算子正規化）

実装が最も簡単で効果的な「三項演算子正規化」の完全な実装例：

```bash
# normalize_js関数に追加する部分
normalize_conditionals() {
  local input="$1" output="$2"
  
  sed -E '
    # 基本的な三項演算子 → if-else
    s/([A-Za-z_$][A-Za-z0-9_$]*)\s*=\s*([^?]+)\?\s*([^:]+)\s*:\s*([^;]+);/\1 = CONDITIONAL_VAR;/g
    
    # return文の三項演算子
    s/return\s+([^?]+)\?\s*([^:]+)\s*:\s*([^;]+);/return CONDITIONAL_VAR;/g
    
    # 関数引数の三項演算子
    s/\(([^?]+)\?\s*([^:]+)\s*:\s*([^)]+)\)/(CONDITIONAL_VAR)/g
  ' "$input" > "$output"
}
```

## ⚡ 実装優先度マトリックス

| 項目 | 実装難易度 | 効果 | 実装時間 | 優先度 |
|------|-----------|------|----------|---------|
| **三項演算子正規化** | ⭐ | ⭐⭐⭐⭐ | 1日 | 🔥 最高 |
| **テンプレートリテラル** | ⭐⭐ | ⭐⭐⭐ | 1日 | 🔥 最高 |
| **分割代入正規化** | ⭐⭐ | ⭐⭐⭐ | 1日 | 🔥 高 |
| **配列パターン強化** | ⭐⭐⭐ | ⭐⭐⭐⭐ | 3日 | 🔥 高 |
| **基本AST解析** | ⭐⭐⭐ | ⭐⭐⭐⭐⭐ | 1週間 | ⚡ 中 |
| **変数名グループ化** | ⭐⭐⭐⭐ | ⭐⭐⭐⭐ | 1週間 | ⚡ 中 |
| **完全AST解析** | ⭐⭐⭐⭐⭐ | ⭐⭐⭐⭐⭐ | 1ヶ月 | 📅 低 |

## 🎯 結論

**最も実装しやすく効果的**なのは：

1. **三項演算子 ↔ if-else 正規化**（1日で実装可能）
2. **ES6+構文の基本正規化**（1-2日で実装可能）
3. **配列メソッドパターンの強化**（3-5日で実装可能）

これらを段階的に実装することで、現在の検出漏れの**約30-40%**を解消できると推定されます。

特に **三項演算子正規化** は sed/awk だけで実装でき、すぐに効果を実感できるため、最初に取り組むべき改善項目です。